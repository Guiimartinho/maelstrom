#!/usr/bin/env python
#
#  Copyright (c) 2012--2014, Nico Schl√∂mer, <nico.schloemer@gmail.com>
#  All rights reserved.
#
#  This file is part of PyMHD.
#
#  PyMHD is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  PyMHD is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with PyMHD.  If not, see <http://www.gnu.org/licenses/>.
#
import numpy as np


def _read_peterformat(fname, scaling=1.0):
    '''Reads mesh file in Peter Nestler's own format.
    '''
    f = open(fname)

    tmp_filename = 'tmp.dat'

    # Read the node data and write it out to a separate file for reading with
    # loadtxt.  Read the first number in the file -- it indicates the number of
    # point coordinates.
    num_points = int(float(f.readline()))
    tmp = open(tmp_filename, 'w')
    for k in range(num_points):
        tmp.write(f.readline())
    tmp.close()
    # Read the node coordinates.
    X = np.loadtxt(tmp_filename)

    X *= scaling

    # Now do the same thing for the connectivity table.
    num_elems = int(float(f.readline()))
    tmp = open(tmp_filename, 'w')
    for k in range(num_elems):
        tmp.write(f.readline())
    tmp.close()
    # Read element connectivity table.
    ect = np.loadtxt(tmp_filename)
    ect = ect.astype(int, copy=False)
    domain = ect[:, 3]
    ect = ect[:, :3]

    # Filter the nodes such that only those nodes are included which are
    # referenced in the element connectivity table.
    #
    # Transform ECT to 0-based indexing.
    ect -= 1
    referenced_nodes, new_indices = np.unique(ect, return_inverse=True)
    X = X[referenced_nodes]
    ect = new_indices.reshape(ect.shape)

    # Make sure that the orientation of the elements is always positive.
    for k, elem in enumerate(ect):
        e1 = X[elem[1]] - X[elem[0]]
        e2 = X[elem[2]] - X[elem[0]]
        if e1[0]*e2[1] < e1[1]*e2[0]:
            ect[k] = [elem[0], elem[2], elem[1]]
    # Transform back to 1-based indexing.
    ect += 1
    return X, ect, domain


def _write_gmsh(filename, X, ect, attributes, elem_regions, names):
    '''Writes data in Gmsh ASCII format, cf.
    <http://www.geuz.org/gmsh/doc/texinfo/#MSH-ASCII-file-format>.
    '''
    f = open(filename, 'w')

    # write gmsh header
    f.write('$MeshFormat\n')
    f.write('2.2 0 8\n')
    f.write('$EndMeshFormat\n')

    num_subdomains = len(names)
    physical_dimension = 2
    f.write('$PhysicalNames\n')
    f.write('%d\n' % num_subdomains)
    for k, name in enumerate(names):
        f.write('%d %d \"%s\"\n' % (physical_dimension, k+1, name))
    f.write('$EndPhysicalNames\n')

    num_nodes = X.shape[0]
    f.write('$Nodes\n')
    f.write('%d\n' % num_nodes)
    for k, node in enumerate(X):
        f.write('%d %e %e %e\n' % (k+1, node[0], node[1], node[2]))
    f.write('$EndNodes\n')

    num_tags = 2

    num_elems = ect.shape[0]
    elem_type = 2
    f.write('$Elements\n')
    f.write('%d\n' % num_elems)
    for k, elem in enumerate(ect):
        f.write('%d %d %d %d %d %d %d %d\n'
                % (k+1, elem_type, num_tags, attributes[k],
                   elem_regions[attributes[k]-1],
                   elem[0], elem[1], elem[2]))
    f.write('$EndElements\n')
    f.close()
    return


def _main():
    args = _parse_args()
    X, ect, domain = _read_peterformat(args.infile, scaling=1.0e-2)
    # The element region tags are chosen somewhat arbitrarily.
    _write_gmsh(args.outfile,
                X, ect, domain,
                [6, 17, 19], ['pot', 'stamp', 'melt']
                )
    return


def _parse_args():
    '''Parse input arguments.'''
    import argparse
    parser = argparse.ArgumentParser(description='Read Peter Nestler\'s data.')
    parser.add_argument('infile',
                        help='Input filename'
                        )
    parser.add_argument('outfile',
                        help='Output filename'
                        )
    return parser.parse_args()


if __name__ == '__main__':
    _main()
