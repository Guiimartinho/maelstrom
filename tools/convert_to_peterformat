#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
import numpy as np


def _main():
    #filename = 'crucible-with-coils.msh'
    #_read_gmsh(filename)
    filename = 'lorentz000000.vtu'
    nodes, cells, point_data = _read_vtk(filename)
    _write_peter('lorentz.peter', nodes, cells, point_data)
    return


def _read_vtk(filename):
    '''Reads a VTK mesh file.
    '''
    import voropy
    mesh, point_data, field_data = voropy.read(filename)
    return mesh.node_coords, mesh.cells, point_data


def _write_peter(filename, nodes, cells, point_data={}):
    f = open(filename, 'w')
    # nodes
    f.write('%d\n' % len(nodes))
    three_d = False
    if three_d and nodes.shape[1] == 2:
        nodes = np.c_[nodes, np.zeros(len(nodes))]
    # Add point data.
    for key, data in point_data.items():
        nodes = np.c_[nodes, data]
    for node in nodes:
        node.tofile(f, sep=' ')
        f.write('\n')
    # cells
    material = 3
    f.write('%d\n' % len(cells))
    for cell in cells:
        cell[0].tofile(f, sep=' ')
        f.write(' %d\n' % material)
    f.close()
    return


def _read_gmsh(filename):
    '''Reads a Gmsh mesh file.
    '''
    import re
    f = open(filename)
    while True:
        identifier = f.readline().rstrip()
        if identifier == '$MeshFormat':
            #format = f.readline()
            pass
        elif identifier == '$PhysicalNames':
            num_physical_names = int(f.readline())
            pnames = {}
            for k in range(num_physical_names):
                # typical line:
                # 2 3 "crystal"
                a = re.match('(\d+) (\d+) "(.*)"', f.readline())
                pnames[int(a.group(2))] = a.group(3)
        elif identifier == '$Nodes':
            num_nodes = int(f.readline())
            nodes = np.empty((num_nodes, 3))
            fp = '[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?'
            #fp = '[-+]?[0-9]*\.?[0-9]+'
            for k in range(num_nodes):
                t = f.readline()
                a = re.match('(\d+) ('+fp+') ('+fp+') ('+fp+')', t)
                nodes[k][:] = [float(a.group(2)),
                               float(a.group(4)),
                               float(a.group(6))]
        elif identifier == '$Elements':
            num_elems = int(f.readline())
            # Triangular cells.
            elems = np.empty((num_elems, 3), dtype=int)
            for k in range(num_elems):
                t = f.readline()
                # For triangular cells with two tags.
                a = re.match('\d+ \d+ \d+ \d+ \d+ (\d+) (\d+) (\d+)', t)
                elems[k][:] = [int(a.group(1)),
                               int(a.group(2)),
                               int(a.group(3))]
        elif identifier == '':
            # EOF
            break
        else:
            raise RuntimeError('Unknown identifier \'%s\'.' % identifier)

        closing = f.readline()
        if closing == '$End'+identifier:
            print closing
    f.close()
    return


if __name__ == '__main__':
    _main()
